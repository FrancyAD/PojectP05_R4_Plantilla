import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.sql.PreparedStatement;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
public class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {
        try {
            var requerimiento_1Dao = new Requerimiento_1Dao();
            var lista = requerimiento_1Dao.requerimiento1();

            for (Requerimiento_1Vo requerimiento_1Vo: lista) {
                System.out.println(requerimiento_1Vo.getCiudad_Residencia()+" "+requerimiento_1Vo.getSalario());
            }
            
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento2() {
        try {
            var requerimiento_2Dao = new Requerimiento_2Dao();
            var lista2 = requerimiento_2Dao.requerimiento2();

            for (Requerimiento_2Vo requerimiento_2Vo: lista2) {
                System.out.println(requerimiento_2Vo.getID_Proyecto()+" "+requerimiento_2Vo.getProveedor());
            }

        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {
        try {
            // Su código
            var requerimiento_3Dao = new Requerimiento_3Dao();
            var lista3 = requerimiento_3Dao.requerimiento3();

            for (Requerimiento_3Vo requerimiento_3Vo: lista3) {
                System.out.println(requerimiento_3Vo.getId_Proyecto()+" "+requerimiento_3Vo.getNombre_Material());
            }

        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

}


// Controlador
public class ControladorRequerimientos {

    private Requerimiento_1Dao requerimiento1Dao;
    private Requerimiento_2Dao requerimiento2Dao;
    private Requerimiento_3Dao requerimiento3Dao;

    public ControladorRequerimientos(){
        this.requerimiento1Dao = new Requerimiento_1Dao();
        this.requerimiento2Dao = new Requerimiento_2Dao();
        this.requerimiento3Dao = new Requerimiento_3Dao();

    }

    public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {        
        return this.requerimiento1Dao.requerimiento1();
    }

    public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {       
        return this.requerimiento2Dao.requerimiento2();
    }

    public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
        return this.requerimiento3Dao.requerimiento3();
    }
}

// Modelo
// VO
public class Requerimiento_1Vo {
    // Su código

    private Integer ID_Lider;
    private String Nombre;
    private Integer Salario;
    private String Ciudad_Residencia;
    
    public Integer getID_Lider() {
        return ID_Lider;
    }
    public void setID_Lider(Integer iD_Lider) {
        ID_Lider = iD_Lider;
    }
    public String getNombre() {
        return Nombre;
    }
    public void setNombre(String nombre) {
        Nombre = nombre;
    }
    public Integer getSalario() {
        return Salario;
    }
    public void setSalario(Integer salario) {
        Salario = salario;
    }
    public String getCiudad_Residencia() {
        return Ciudad_Residencia;
    }
    public void setCiudad_Residencia(String ciudad_Residencia) {
        Ciudad_Residencia = ciudad_Residencia;
    }
    
}

public class Requerimiento_2Vo {
    // Su código
    private String Proveedor;
    private String ciudad_residencia;
    private Integer ID_Proyecto;
    
    public String getProveedor() {
        return Proveedor;
    }
    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }
    public String getCiudad_residencia() {
        return ciudad_residencia;
    }
    public void setCiudad_residencia(String ciudad_residencia) {
        this.ciudad_residencia = ciudad_residencia;
    }
    public Integer getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(Integer iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }

}

public class Requerimiento_3Vo {
    // Su código
    private Integer id_Proyecto;
    private String Nombre_Material;
    
    public Integer getId_Proyecto() {
        return id_Proyecto;
    }
    public void setId_Proyecto(Integer id_Proyecto) {
        this.id_Proyecto = id_Proyecto;
    }
    public String getNombre_Material() {
        return Nombre_Material;
    }
    public void setNombre_Material(String nombre_Material) {
        Nombre_Material = nombre_Material;
    }

}

// DAO
public class Requerimiento_1Dao {

    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        // Su código
        Connection conex = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_1Vo> lista = new ArrayList<Requerimiento_1Vo>();
        boolean existe = false;
        
        String sql = "SELECT Ciudad_Residencia, AVG(Salario) AS Promedio FROM Lider l group by Ciudad_Residencia HAVING AVG(Salario)<600000 ORDER by AVG(Salario) DESC";
        
        try {
            
            PreparedStatement consulta = conex.prepareStatement(sql);
            ResultSet res = consulta.executeQuery();

            while (res.next()) {
                
                var lider = new Requerimiento_1Vo();
                existe = true;

                lider.setCiudad_Residencia(res.getString("Ciudad_Residencia"));
                lider.setSalario((int)Math.round(res.getDouble("Promedio")));
                
                lista.add(lider);
            }

            res.close(); // cierra consulta
            conex.close(); // cierra conexion

        } catch (SQLException e) {
            System.out.println("Error de conexión a la base de datos");
        }

        if (existe) {
            return lista;
        } else {
            return null;
        }

    }
}

public class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
        // Su código

        Connection conex = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_2Vo> lista2 = new ArrayList<Requerimiento_2Vo>();
        boolean existe = false;
        
        String sql = "SELECT ID_Proyecto, Proveedor from Proyecto p2 natural join Compra c WHERE Ciudad ='Quibdo' ORDER by ID_Proyecto";
        
        try {
            
            PreparedStatement consulta = conex.prepareStatement(sql);
            ResultSet res = consulta.executeQuery();

            while (res.next()) {
                
                var proveedor = new Requerimiento_2Vo();
                existe = true;

                proveedor.setID_Proyecto(res.getInt("ID_Proyecto"));
                proveedor.setProveedor(res.getString("Proveedor"));
                
                lista2.add(proveedor);
            }

            res.close(); // cierra consulta
            conex.close(); // cierra conexion

        } catch (SQLException e) {
            System.out.println("Error de conexión a la base de datos");
        }

        if (existe) {
            return lista2;
        } else {
            return null;
        }

    }
}

public class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {

        Connection conex = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_3Vo> lista3 = new ArrayList<Requerimiento_3Vo>();
        boolean existe = false;
        
        String sql = "SELECT ID_Proyecto, Nombre_Material FROM Compra c Natural Join MaterialConstruccion mc WHERE ID_Proyecto BETWEEN 5 and 15 order by ID_Proyecto";
        
        try {
            
            PreparedStatement consulta = conex.prepareStatement(sql);
            ResultSet res = consulta.executeQuery();

            while (res.next()) {
                
                var proyecto = new Requerimiento_3Vo();
                existe = true;

                proyecto.setId_Proyecto(res.getInt("ID_Proyecto"));
                proyecto.setNombre_Material(res.getString("Nombre_Material"));
                
                lista3.add(proyecto);
            }

            res.close(); // cierra consulta
            conex.close(); // cierra conexion

        } catch (SQLException e) {
            System.out.println("Error de conexión a la base de datos");
        }

        if (existe) {
            return lista3;
        } else {
            return null;
        }
        
    }
}